# Parameter
$OfficeProzesse = @(
    'Teams', 'Outlook', 'WinWord', 'Excel', 'Powerpoint', 'OneDrive', 'OneNote', 'OneNoteM'
)
$TeamsOrdner = "$env:APPDATA\Microsoft\Teams"

# Hauptmenü
$cache = [System.Management.Automation.Host.ChoiceDescription]::new('&Cache', 'Nur Cache wird gelöscht')
$alles = [System.Management.Automation.Host.ChoiceDescription]::new('&Alles (Cache & Anmeldeinformationen)', 'Cache und Anmeldeinformationen werden gelöscht!')
$nichts = [System.Management.Automation.Host.ChoiceDescription]::new('&Nichts', 'Skript wird abgebrochen!')
$antworten = [System.Management.Automation.Host.ChoiceDescription[]]($cache, $alles, $nichts)
$titel = 'Was soll bereinigt werden?'
$nachricht = "`nIm Zweifelsfall erst nur den Cache,`nansonsten mit Option Alles nochmal ausführen!"

$ergebnis = $host.ui.PromptForChoice($titel, $nachricht, $antworten, 2)
Clear-Host

if ($ergebnis -eq 0) { 
    Close-OfficeProzesse
    Remove-TeamsCache
    
    Clear-Host
    Write-Host 'Ausführung abgeschlossen!'
    Write-Host 'Nach erfolgreichem Test am besten PC neustarten!'
}
elseif ($ergebnis -eq 1) {
    Close-OfficeProzesse
    Remove-TeamsCache
    Remove-Rest

    Clear-Host
    Write-Host 'Ausführung abgeschlossen!'
    Write-Host 'Nach erfolgreichem Test am besten PC neustarten!'
}
else {
    Write-Host 'Ausführung vom Nutzer abgebrochen!'
}
Start-Sleep -Seconds 5
Clear-Host
Exit

function Close-OfficeProzesse {

    # Office Prozesse beenden
    foreach ($Prog in $OfficeProzesse) {
        $Prozess = Get-Process -ProcessName $Prog -ErrorAction SilentlyContinue
        Write-Host 'Versuche '+ $Prog + ' zu beenden...'
        if ($null -ne $Prog) {
            Stop-Process $Prozess.Id -Force
        }
    }
    Write-Host 'Es wird 5 Sekunden auf Beendigung der Prozesse gewartet...'
    Wait-Process -Name ($OfficeProzesse -join ', ') -Timeout 5
}

function Remove-TeamsCache {
    # Teams Cache leeren und andere Dateien löschen
    try {
        Get-ChildItem -Path $TeamsOrdner | Remove-Item -Recurse -ErrorAction SilentlyContinue
        Write-Host 'Teams Cache geleert' 
    }
    catch {
        Write-Host $Error[0]
    }
}

function Remove-Rest {
    # Gespeicherte Anmeldedaten zu Teams entfernen
    cmdkey /list | ForEach-Object 
    { 
        if ($_ -like '*Ziel:*' -and $_ -like '*teams*') {
            cmdkey /del:($_ -replace ' ', '' -replace 'Ziel:', '') 
        }
    }
}

# Teams Registry Schlüssel entfernen
try {
    $Regkeypath = 'HKCU:\Software\Microsoft\Office\Teams' 
    $value = $null -eq (Get-ItemProperty $Regkeypath).HomeUserUpn
    If ($value -eq $False) { 
        Remove-ItemProperty -Path 'HKCU:\Software\Microsoft\Office\Teams' -Name 'HomeUserUpn'
        Write-Host 'Registrierungseintrag erfolgreich entfernt!' 
    } 
}
catch {
    Write-Host 'Registrierungseintrag existiert nicht!' 
}
    
# Entferne AAD.BrokerPlugin (Arbeits-/Schul-Konto Anmeldung)
try {
    $LocalPackagesFolder = "$env:LOCALAPPDATA\Packages"
    $AADBrokerFolder = Get-ChildItem -Path $LocalPackagesFolder -Recurse -Include 'Microsoft.AAD.BrokerPlugin_*'
    $AADBrokerFolder = $AADBrokerFolder[0]
    Get-ChildItem "$AADBrokerFolder\AC\TokenBroker\Accounts" | Remove-Item -Recurse -Force
    Write-Host 'Arbeits-/Schulkonto-Sitzung entfernt!'
}
catch {
    Write-Host 'Fehler beim Entfernen der Sitzung des Arbeits- oder Schulkontos:'
    Write-Host $Error[0]
}